DB Function
- SUM(), AVG(), MIN(), MAX()
- ROUND(), LENGTH(), uCASE(), LCASE
- YEAR(), MONTH(), DAY(), DAYOFMONTH(), DAYOFWEEK(), DAYOFYEAR(), WEEK(), HOUR(), MINUTE(), SECOND()

0.1 Overcome limitations of agg func by sub-queries and nested selects

Sub-queries & nested selects    # can be used when multi tables
SELECT EMP_ID, F_NAME, L_NAME, SALARY
FROM employees
WHERE SALARY < (select AVG(SALARY)  #here
                from employees);

SELECT EMP_ID, SALARY, (select MAX(SALARY) FROM employees ) AS MAX_SALARY  #here
FROM employees;

select * from employees where JOB_ID <talbe1> IN/= (select JOB_IDENT from jobs <table2> where JOB_TITLE= 'Jr. Designer');

0.2 Multitables

0.2.1 Implicit Join
- Primary key: uniquely identifies each row in a table e.g. ID no.
- Secondary key: primary key of another table
- can combine more than 2 tables for each SQL commands
TABLE Borrower (
    Borrower_ID,
    Borrower_name,
    ...
    )

TABLE Loan (
    COPY_ID,
    Borrower_ID,
    Loan_date
    Return_date
    )

0.2.2
Inner Join: only combines rows from joined tables that have a matching value in a common column
%%SQL
SELECT B.BORROWER_ID, B.NAME, L.BORROWER_ID, L.LOAN_DATE
FROM BORROWER B INNER JOIN LOAN L
ON B.BORROWER = L.BORROWER

0.2.3
left outer join (displays all the rows from the left table, and combines matching rows from the right table)
right outer join
full Outer join



0.3
view is an alternative way of representing data that exists in one or more tables,
are fields from one or more real tables in the database

CREATE or REPLACE VIEW view_name
AS SELECT column1, column2, ...
FROM table_1, table_2
WHERE condition;


Data Manipulation Language (DML) statements are used to read and modify data in tables. These are also sometimes referred to as CRUD operations,
that is, Create, Read, Update and Delete rows in a table. Common DML statement types include INSERT, SELECT, UPDATE, and DELETE

1.1 SELECT *(all) / column1, column2,
FROM table_name

1.2 WHERE <COL> e.g. LIKE "A%" / Range / ... or ... equivalent to <COL> in ("value", "value")#String pattern, returns when <COL> starts with A
# NOT LIKE
# "%A% anywhere in <COL>
# "__A%" starts with 3rd position
# can't use agg function in WHERE clause

sub-queries to evaluate agg func

1.3 ORDER BY <COL1> DESC, <COL2> #ordered in descending order by <COL1> & within order by <COL2> in ASEC
# can use number 1, 2, 3 to specify which col if multiple col called

1.4 GROUP BY <COL>
SELECT DEP_ID, COUNT(*) AS "NUM_EMPLOYEES", AVG(SALARY) AS "AVG_SALARY"
FROM EMPLOYEES
GROUP BY DEP_ID;

1.4.1 HAVING <PREDICATE> #ONLY WORKS FOR GROUP BY, unlike where clause works for whole result set

1.5 COUNT()
SELECT COUNT(*) from FilmLocations where ReleaseYear < 1950;

1.6 DISTINCT    #retrieve unique value
SELECT COUNT(DISTINCT ReleaseYear) FROM FilmLocations WHERE ProductionCompany="Warner Bros. Pictures";

1.7 LIMIT #similar to .head()
SELECT * FROM FilmLocations LIMIT 15 OFFSET 10; #retrieve first 15 rows starting from 11th row

1.8
INSERT INTO <tablename> VALUES
("xx" , "XX", ...),    #first row
("xx", "XX", ...), ...    #2nd row


DELETE from <Table> WHERE <Predicate>



Data Definition Language (DDL) statements are used to define, change, or drop database objects such as tables
Common DDL statement types include CREATE, ALTER, TRUNCATE, and DROP

2.1 CREATE
CREATE TABLE Student(Name VARCHAR(20) PRIMARY KEY NOT NULL,
                    Gender CHAR(6)); # Primary Keys  constraint uniquely identifies each record in a table, can help speed up your queries significantly
INSERT into Student VALUES('Herry', 'Male');
INSERT into Student VALUES('Mahi', 'Female');
SELECT LENGTH(Name) FROM Student;

# VAR() used when data values is of fixed length(size), if less than fixed length padded with extra memory space
# varchar(60) used when data values is of var length(size), w/o padded extra space, performance not as good as CHAR()

2.2 ALTER #change str of existing table e.g. add, modify, drop

2.2.1
ALTER <table>
ADD <column> <dtype> column_constraint;     #ADD COLUMN

2.2.2
#then add in new data
UPDATE <table> SET <column=xx> WHERE <predicate>

2.2.3
ALTER <table>
DROP <column>;    #del col

2.2.4
ALTER <table>
ALTER <column> SET <dtype>;   #alter col dtype

2.2.5
ALTER <table>
RENAME <column> current_column_name TO new_column_name;   #rename col name

2.3
DROP <table>
# del all data and table

2.4
TRUNCATE <table>
    IMMEDIATE:\;
# del all data but keep table

3.1
DB-API
Python lib for different DB systems
IBM Db2: ibm_db
MySQL: MySQL Connector/Python
PostgreSQL: psycopg2
MongoDB: PyMongo

Connection Objects for DB connections and Manage transaction
Connecton = connect("db_name", "userid","pwd")

3.2
Cursor Objects for DB queries, scroll thru result set and retrieve results
Cursor = Connection.cursor()
Connection.commit()
Connection.rollback()
Connection.close()

3.3
Cursor.callproc()
CUrsor.execute("select * from <table>")
.executemany()
.fetchone()
.fetchmany()
Results = Cursor.fetchall()
.nextset()
.arraysize()
Cursor.close()

port": 30367
"database": "bludb"
"hostname": "815fa4db-dc03-4c70-869a-a9cc13f33084.bs2io90l08kqb1od8lcg.databases.appdomain.cloud"
"password": "juFr8vgUo7ILSTyg",
"username": "ylg89839"


4. Store Procedures

4.1 Create store proceure routine

--#SET TERMINATOR @

--#SET TERMINATOR @
CREATE PROCEDURE UPDATE_SALEPRICE (
    IN Animal_ID INTEGER, IN Animal_Health VARCHAR(5) )     -- ( { IN/OUT type } { parameter-name } { data-type }, ... )

LANGUAGE SQL                                                -- Language used in this routine
MODIFIES SQL DATA                                           -- This routine will only write/modify data in the table

BEGIN

    IF Animal_Health = 'BAD' THEN                           -- Start of conditional statement
        UPDATE PETSALE
        SET SALEPRICE = SALEPRICE - (SALEPRICE * 0.25)
        WHERE ID = Animal_ID;

    ELSEIF Animal_Health = 'WORSE' THEN
        UPDATE PETSALE
        SET SALEPRICE = SALEPRICE - (SALEPRICE * 0.5)
        WHERE ID = Animal_ID;

    ELSE
        UPDATE PETSALE
        SET SALEPRICE = SALEPRICE
        WHERE ID = Animal_ID;

    END IF;                                                 -- End of conditional statement

END
@                                                           -- Routine termination character

4.1.1 Call
CALL UPDATE_SALEPRICE(1, 'BAD');      -- Caller query, update the sale price of animal with ID 1 having BAD health condition in the PETSALE table

4.1.2 Drop
DROP PROCEDURE UPDATE_SALEPRICE;

4.2 ACID TRANSACTION (indivisible set of SQL statements)
- Atomic, either all happens successfully w/o errors or none
- Consistent, data in consistent state b4 and after trans
- Isolated, no other process can change data while trans running
- Durable, change made by trans must persist

4.2.1 Create tables


DROP TABLE BankAccounts;

CREATE TABLE BankAccounts (
    AccountNumber VARCHAR(5) NOT NULL,
    AccountName VARCHAR(25) NOT NULL,
    Balance DECIMAL(8,2) CHECK(Balance>=0) NOT NULL,
    PRIMARY KEY (AccountNumber)
    );

INSERT INTO BankAccounts VALUES
('B001','Rose',300),
('B002','James',1345),
('B003','Shoe Shop',124200),
('B004','Corner Shop',76000);

SELECT * FROM BankAccounts;

DROP TABLE ShoeShop

CREATE TABLE ShoeShop (
    Product VARCHAR(25) NOT NULL,
    Stock INTEGER NOT NULL,
    Price DECIMAL(8,2) CHECK(Price>0) NOT NULL,
    PRIMARY KEY (Product)
    );


INSERT INTO ShoeShop VALUES
('Boots',11,200),
('High heels',8,600),
('Brogues',10,150),
('Trainers',14,300);

SELECT * FROM ShoeShop;

4.2.2 Create store procedures
--#SET TERMINATOR @
CREATE PROCEDURE TRANSACTION_ROSE                           -- Name of this stored procedure routine

LANGUAGE SQL                                                -- Language used in this routine
MODIFIES SQL DATA                                           -- This routine will only write/modify data in the table

BEGIN

        DECLARE SQLCODE INTEGER DEFAULT 0;                  -- Host variable SQLCODE of each SQL statement and assigned 0, returns negative value for error, zero for success, positive value for warning
        DECLARE retcode INTEGER DEFAULT 0;                  -- Local variable retcode with declared and assigned 0
        DECLARE CONTINUE HANDLER FOR SQLEXCEPTION           -- Handler tell the routine what to do when an error or warning occurs
        SET retcode = SQLCODE;                              -- local variable retcode to catch return value of SQLCODE, since SQLCODE resets for each new SQL statements

        UPDATE BankAccounts
        SET Balance = Balance-200
        WHERE AccountName = 'Rose';

        UPDATE BankAccounts
        SET Balance = Balance+200
        WHERE AccountName = 'Shoe Shop';

        UPDATE ShoeShop
        SET Stock = Stock-1
        WHERE Product = 'Boots';

        UPDATE BankAccounts
        SET Balance = Balance-300
        WHERE AccountName = 'Rose';


        IF retcode < 0 THEN                                  --  SQLCODE returns negative value for error, zero for success, positive value for warning
            ROLLBACK WORK;

        ELSE
            COMMIT WORK;                                      -- only iff all trans executed successfully

        END IF;

END
@                                                            -- Routine termination character

4.2.3 Success?
CALL TRANSACTION_ROSE;  -- Caller query

SELECT * FROM BankAccounts;

SELECT * FROM ShoeShop;

transaction has been executed. But no changes permanently been saved through COMMIT.
All cahnges undone through ROLLBACK since the whole transaction fails
due to the failure of a SQL statement or more
    - After buying of "Boots", Rose bank balance= 300-200 =100, Shop Shop = 124,200+200 = 124,400 and stock = 11-1 =10
    - insuff to buy another pair of trainers of $300--> fails